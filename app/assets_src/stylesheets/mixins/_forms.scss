// Source: Bootstrap

// Block level inputs
@mixin input-block-level {
  display: block;
  width: 100%;
  min-height: 30px;                // Make inputs at least the height of their button counterpart
  @include box-sizing(border-box); // Makes inputs behave like true block-level elements
}

@mixin inputOuterHeight($vertPadding) {
	$height: $vertPadding * 2 + $baseHeight + 2px;
	height: $height;
	line-height: $height;
}

// Mixin for form field states
@mixin formFieldState($textColor: #555, $borderColor: #ccc, $backgroundColor: #f5f5f5) {
  // Set the text color
  > label, .help-block, .help-inline {
    color: $textColor;
  }
  // Style inputs accordingly
  .checkbox, .radio, input, select, textarea {
    color: $textColor;
    border-color: $borderColor;
    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    &:focus {
      border-color: darken($borderColor, 10%);
      // Write out in full since the lighten() function isn't easily escaped
      -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($borderColor, 20%);
         -moz-box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($borderColor, 20%);
              box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($borderColor, 20%);
    }
  }
  // Give a small background color for input-prepend/-append
  .input-prepend .add-on,
  .input-append .add-on {
    color: $textColor;
    background-color: $backgroundColor;
    border-color: $textColor;
  }
}

// Placeholder text
@mixin placeholder($color: $placeholderTextColor) {
  &:-moz-placeholder {
		-webkit-font-smoothing: antialiased;
    color: $color;
  }
  &:-ms-input-placeholder {
		-webkit-font-smoothing: antialiased;
    color: $color;
  }
  &::-webkit-input-placeholder {
		-webkit-font-smoothing: antialiased;
    color: $color;
  }
}


// Source: Bootstrap
// Grid System
@mixin grid-input($gridColumnWidth, $gridGutterWidth) {
  input,
  textarea,
  .uneditable-input {
    margin-left: 0; // override margin-left from core grid system
  }
  // Space grid-sized controls properly if multiple per line
  .controls-row [class*="span"] + [class*="span"] {
    margin-left: $gridGutterWidth;
  }
  // generate .spanX
  @include grid-input-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth);
}

@mixin grid-input-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  @while $gridColumns > 0 {
    input.span#{$gridColumns},
    textarea.span#{$gridColumns},
		.btn-select.span#{$gridColumns}
    .uneditable-input.span#{$gridColumns} {
      @include grid-input-span($gridColumns, $gridColumnWidth, $gridGutterWidth);
    }
    $gridColumns: $gridColumns - 1;
  }
}

@mixin grid-input-span($columns, $gridColumnWidth, $gridGutterWidth) {
  width: (($gridColumnWidth) * $columns) + ($gridGutterWidth * ($columns - 1)) - ($inputHorizontalPad * 2) - 2px;
}
